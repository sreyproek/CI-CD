name: CI

on:
  push:
    branches: 
    - main #change to your defualt brance

jobs:
  build:
    runs-on: ubuntu-latest   # Specifies that the job should run on the latest Ubuntu virtual environment provided by GitHub
    defaults:
      run:
        working-directory: "." # Adjust this to the root directory of your Node.js project

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # This step checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it

      - name: Set up Node.js
        uses: actions/setup-node@v4  # This step checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it
        with:
          node-version: "20"  # Specify the Node.js version you require, e.g., '14', '16'

      - name: Install dependencies
        run: yarn install  # Runs yarn install to install all dependencies defined in your package.json

      - name: Run build
        run: yarn build # Executes the build script defined in your package.json


      - name: Run tests
        env:
          MONGOBD_URL: ${{ secrets.MONGODB_URL }}
        run: yarn test

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./build

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./build 

      - name: Prepare Deployment Directories
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            mkdir -p /home/ubuntu/apps/build #Change to match your desire directory structure
            mkdir -p /home/ubuntu/apps/build/configs #for additional configuration files

      - name: Copy files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "./build/*"
          target: "/home/ubuntu/apps/build"
          strip_components: 1

      - name: Create .env File
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "NODE_ENV=production" > /home/ubuntu/apps/build/configs/.env.production
            echo "PORT=${{secrets.PORT}}" >> /home/ubuntu/apps/build/configs/.env.production
            echo "DATABASE_URL=${{secrets.MONGO_URL}}" >> /home/ubuntu/apps/build/configs/.env.production

      - name: Install Dependencies and Restart Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            source /home/ubuntu/.nvm/nvm.sh
            source /home/ubuntu/.profile

            cd /path/to/deployment/directory/build
            yarn install --production

            # Assume PM2 is used, Replace with other command for other process manager
            # Assume you have script for run start in production and restart in production
            # Check if the PM2 process is running
            
            ls -la /home/ubuntu/apps/build

            if pm2 show your-service-name > /dev/null; then
              echo "Application is running. Restarting..."
               pm2 restart product-service
            else
              echo "Application is not running. Starting..."
               pm2 start yarn --name auth -- start
            fi